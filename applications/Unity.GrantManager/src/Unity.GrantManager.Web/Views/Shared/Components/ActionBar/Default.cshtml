@using Unity.GrantManager.Localization;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.Extensions.Localization;
@using Unity.GrantManager.Permissions;
@using Unity.GrantManager.Payments;
@using Volo.Abp.Features;

@inject IStringLocalizer<GrantManagerResource> L
@inject IAuthorizationService AuthorizationService
@inject IFeatureChecker FeatureChecker

<div class="action-bar p-2 search-action-bar">
    <div class="search-action-bar_search-wrapper">
        <input type="search" id="search" placeholder="Search" class="tbl-search">
    </div>

    <div class="btn-group" id="app_custom_buttons">

        <abp-button id="externalLink"
                    text="@L["ApplicationList:OpenButton"].Value"
                    data-selector="applications-table-actions"
                    class="custom-table-btn flex-none btn btn-secondary action-bar-btn-unavailable"
                    button-type="Secondary" />

        <abp-button id="assignApplication"
                    data-selector="applications-table-actions"
                    button-type="Secondary"
                    class="custom-table-btn flex-none btn btn-secondary action-bar-btn-unavailable"
                    text="@L["ApplicationList:AssignButton"].Value" />


        <abp-button id="tagApplication"
                    data-selector="applications-table-actions"
                    text="@L["ApplicationList:TagButton"].Value"
                    class="custom-table-btn flex-none btn btn-secondary action-bar-btn-unavailable"
                    button-type="Secondary" />

        @if (await FeatureChecker.IsEnabledAsync(PaymentConsts.UnityPaymentsFeature))
        {
            <abp-button id="applicationPaymentRequest"
                        data-selector="applications-table-actions"
                        text="Payment"
                        class="custom-table-btn flex-none btn btn-secondary action-bar-btn-unavailable"
                        button-type="Secondary" />

        }

        <abp-button id="applicationLink"
                    text="@L["ApplicationList:InfoButton"].Value"
                    data-selector="applications-table-actions"
                    class="custom-table-btn flex-none btn btn-secondary action-bar-btn-unavailable"
                    button-type="Secondary" />

        <abp-button id="btn-toggle-filter"
                    text="Filter"                    
                    class="custom-table-btn flex-none btn btn-secondary"
                    button-type="Secondary" />
    </div>

    <div id="dynamicButtonContainerId">

        <abp-row>
            <abp-column class="spinner-loader">
                <div class="spinner-grow" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </abp-column>
        </abp-row>
    </div>
</div>

<div class="offcanvas offcanvas-end container-fluid px-2" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="applicationAsssessmentSummary" aria-labelledby="offcanvasScrollingLabel">
    <div class="offcanvas-header">
        <h5 id="offcanvasRightLabel"></h5>
        <button type="button" id="closeSummaryCanvas" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div id="summaryWidgetArea">
            @await Component.InvokeAsync("SummaryWidget")
        </div>
    </div>
</div>



@using Microsoft.AspNetCore.Mvc.Localization
@using Unity.GrantManager.Web.Views.Shared.Components.AssessmentScoresWidget
@using Volo.Abp.AspNetCore.Mvc.UI.Layout
@using Unity.GrantManager.Web.Pages.GrantApplications

@model AssessmentScoresWidgetViewModel
@{
    Layout = null;
}

<form id="assessmentScoresWidgetForm" action="Widgets/AssessmentScores/UpdateAssessmentScores" method="post" enctype="multipart/form-data">
    <div class="container-fluid px-3" id="assessment-scoresheet">
        <div class="scores-block-wrapper assessment-scores-container">
            <div class="scores-block">
                <div class="accordion" id="scoresheetAccordion">
                    @if (Model.Scoresheet != null && Model.Scoresheet.Sections.Any())
                    {
                        var sectionNumber = 1;
                        @foreach (var sec in Model.Scoresheet.Sections.OrderBy(s => s.Order))
                        {
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading-@sec.Id">
                                    <button id="section-button" class="accordion-button collapsed preview-btn" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@sec.Id" aria-expanded="true" aria-controls="collapse-@sec.Id">
                                        @sectionNumber. @sec.Name
                                    </button>
                                </h2>
                                <div id="collapse-@sec.Id" class="accordion-collapse collapse" aria-labelledby="heading-@sec.Id">
                                    <div class="accordion-body">
                                        <div class="accordion" id="questionsAccordion-@sec.Id">
                                            @if (sec.Fields != null && sec.Fields.Any())
                                            {
                                                var questionNumber = 1;
                                                @foreach (var question in sec.Fields.OrderBy(q => q.Order))
                                                {
                                                    <div class="accordion-item">
                                                        <h2 class="accordion-header" id="question-heading-@question.Id">
                                                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#question-collapse-@question.Id" aria-expanded="true" aria-controls="question-collapse-@question.Id">
                                                                @sectionNumber.@questionNumber @question.Name
                                                            </button>
                                                        </h2>
                                                        <div id="question-collapse-@question.Id" class="accordion-collapse collapse" aria-labelledby="question-heading-@question.Id" data-bs-parent="#questionsAccordion-@sec.Id">
                                                            <div class="accordion-body">
                                                                <p>@question.Description</p>
                                                                <div class="mb-3">
                                                                    <label for="answer-@question.Id" class="form-label">Answer</label>
                                                                    <input type="text" class="form-control answer-input" id="answer-@question.Id" name="Answers[@question.Id]" value="" data-original-value="" oninput="handleInputChange('@question.Id')" />
                                                                </div>
                                                                <div class="btn-group">
                                                                    <button type="button" class="btn btn-primary" id="save-@question.Id" disabled onclick="saveChanges('@question.Id')">SAVE CHANGES</button>
                                                                    <button type="button" class="btn btn-secondary" onclick="discardChanges('@question.Id')">DISCARD CHANGES</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    questionNumber++;
                                                }
                                            }
                                            else
                                            {
                                                <p>No questions available.</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                            sectionNumber++;
                        }
                    }
                    else
                    {
                        <p>No sections available.</p>
                    }
                </div>
            </div>
            <div class="assessment-sum">
                <label class="form-label" for="subTotal">Subtotal</label>
                <input type="number" size="18" class="form-control" disabled="disabled" name="SubTotal" id="subTotal" value="@Model.ScoreTotal()" min="0" max="2147483647" />
            </div>
            <div class="scores-block-save">
                <abp-button text="Save" type="button" id="saveAssessmentScoresBtn" disabled="true" onclick="saveAssessmentScores()" icon-type="Other" icon="fl fl-save" button-type="Light" />
            </div>
        </div>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        const answerInputs = document.querySelectorAll('.answer-input');
        answerInputs.forEach(input => {
            input.setAttribute('data-original-value', input.value);
        });
    });

    function handleInputChange(questionId) {
        const inputField = document.getElementById('answer-' + questionId);
        const saveButton = document.getElementById('save-' + questionId);
        const originalValue = inputField.getAttribute('data-original-value');
        
        if (inputField.value !== originalValue) {
            saveButton.disabled = false;
        } else {
            saveButton.disabled = true;
        }
    }

    function saveChanges(questionId) {
        const inputField = document.getElementById('answer-' + questionId);
        const saveButton = document.getElementById('save-' + questionId);

        // Your save logic here
        

        // After saving, update the original value to the new value
        inputField.setAttribute('data-original-value', inputField.value);
        saveButton.disabled = true;
    }

    function discardChanges(questionId) {
        const inputField = document.getElementById('answer-' + questionId);
        const saveButton = document.getElementById('save-' + questionId);

        const originalValue = inputField.getAttribute('data-original-value');
        inputField.value = originalValue;

        saveButton.disabled = true;
    }
</script>

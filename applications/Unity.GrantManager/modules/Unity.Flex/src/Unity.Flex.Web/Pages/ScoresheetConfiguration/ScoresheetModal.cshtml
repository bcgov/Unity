@page
@using Microsoft.Extensions.Localization
@using Unity.Flex.Localization;
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal;
@using Unity.Flex.Web.Pages.ScoresheetConfiguration;
@model Unity.Flex.Web.Pages.ScoresheetConfiguration.ScoresheetModalModel

@inject IStringLocalizer<FlexResource> L

@{
    Layout = null;
}
<form method="post" asp-page-handler="OnPostAsync" id="scoresheetInfo">
    <abp-input type="hidden" id="ScoresheetId" asp-for="@Model.Scoresheet.Id" />
    <abp-input type="hidden" id="ActionType" asp-for="@Model.Scoresheet.ActionType" />
    <abp-input type="hidden" id="GroupId" asp-for="@Model.Scoresheet.GroupId" />
    <abp-modal size="Large" id="scoresheet-info-modal">
        <abp-modal-header class="site-info-modal-header" title="@Model.Scoresheet.ActionType"></abp-modal-header>
        <abp-modal-body>
            <abp-row class="m-0 p-0">
                <abp-column size="_12" class="px-1">
                    <abp-input asp-for="@Model.Scoresheet.Name" />
                </abp-column>
            </abp-row>
        </abp-modal-body>
        <abp-modal-footer>
            <button type="submit" class="btn btn-primary" onclick="handleSaveButtonClick(event)">@AbpModalButtons.Save</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@AbpModalButtons.Cancel</button>
            @if (!Model.Scoresheet.ActionType.StartsWith("Add"))
            {
                <button type="button" class="btn btn-danger" onclick="deleteScoresheet()">Delete</button>
            }
        </abp-modal-footer>
    </abp-modal>
</form>

<script>
    function handleSaveButtonClick(event) {
        if ($('#ActionType').val() === 'Edit Scoring Sheet') {
            event.preventDefault();
            Swal.fire({
                title: "Confirm changes made to scoring sheet",
                text: "Do you want to save your changes on the current versions only or create a new score sheet version too?",
                showCancelButton: true,
                confirmButtonText: 'Save changes to the current versions',
                cancelButtonText: 'Create a new version',
                customClass: {
                    confirmButton: 'btn btn-primary',
                    cancelButton: 'btn btn-secondary'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    $('#ActionType').val('Edit Scoring Sheet On Current Version');
                    $('#scoresheetInfo').submit();
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    Swal.fire({
                        title: "Note",
                        text: "Note that to apply the new version of the scoresheet in the assessment process, you need to link the corresponding form to the updated version.",
                        confirmButtonText: 'Ok',
                        customClass: {
                            confirmButton: 'btn btn-primary'
                        }
                    }).then(() => {
                        $('#ActionType').val('Edit Scoring Sheet On New Version');
                        $('#scoresheetInfo').submit();
                    });
                }
            });
        } 
    }

    function deleteScoresheet() {
        Swal.fire({
            title: "Delete Scoresheet",
            text: 'Are you sure you want to delete this scoresheet?',
            showCancelButton: true,
            confirmButtonText: 'Confirm',
            customClass: {
                confirmButton: 'btn btn-primary',
                cancelButton: 'btn btn-secondary'
            }
        }).then((result) => {
            if (result.isConfirmed) {
                $('#ActionType').val('Delete Scoresheet');
                $('#scoresheetInfo').submit();
            }
        });
    }
</script>
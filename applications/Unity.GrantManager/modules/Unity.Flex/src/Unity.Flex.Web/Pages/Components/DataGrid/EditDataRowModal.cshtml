@page
@using Microsoft.Extensions.Localization;
@using Unity.Flex.Localization;
@using Unity.Flex.Web.Views.Shared.Components.CheckboxWidget;
@using Unity.Flex.Web.Views.Shared.Components.CurrencyWidget;
@using Unity.Flex.Web.Views.Shared.Components.DateWidget;
@using Unity.Flex.Web.Views.Shared.Components.TextAreaWidget;
@using Unity.Flex.Web.Views.Shared.Components.YesNoWidget
@using Unity.Flex.Worksheets;
@using Unity.Flex;
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal;

@model Unity.Flex.Web.Pages.Flex.EditDataRowModalModel;

@inject IStringLocalizer<FlexResource> L
@{
    Layout = null;
}

<form method="post" asp-page-handler="OnPostAsync" id="editRowData" spellcheck="false">
    <abp-modal size="Large" id="custom-field-info-modal">
        <abp-modal-header class="custom-field-info-modal-header" title="Edit"></abp-modal-header>
        <abp-modal-body>
            <abp-input type="hidden" id="valueId" asp-for="@Model.ValueId" />
            <abp-input type="hidden" id="rowNumber" asp-for="@Model.Row" />

            @foreach (var field in Model.Properties ?? [])
            {
                <div class="edit_row_field unity-input-group">
                    <label class="form-label" for="@field.Name">@field.Label</label>
                    @try
                    {
                        @switch (field.Type)
                        {
                            case CustomFieldType.Checkbox:
                                {
                                    @await Component.InvokeAsync(typeof(CheckboxWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.Currency:
                                {
                                    @await Component.InvokeAsync(typeof(CurrencyWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.Date:
                                {
                                    @await Component.InvokeAsync(typeof(DateWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.DateTime:
                                {
                                    @await Component.InvokeAsync(typeof(DateWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.TextArea:
                                {
                                    @await Component.InvokeAsync(typeof(TextAreaWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.YesNo:
                                {
                                    @await Component.InvokeAsync(typeof(YesNoWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            default:
                                {
                                    <input type="@field.Type.ConvertInputType()"
                                           label="@field.Label"
                                           value="@field.CurrentValue?.ConvertInputValueOrNull(field.Type)"
                                           class="@field.Type.ApplyCssClass()"
                                           id="@($"{field.Name}.{field.Name}.{field.Id}")"
                                           name="@($"{field.Name}.{field.Name}.{field.Id}")"
                                           min="@field.Definition?.ConvertDefinition(field.Type)?.GetMinValueOrNull()"
                                           max="@field.Definition?.ConvertDefinition(field.Type)?.GetMaxValueOrNull()"
                                           minlength="@field.Definition?.ConvertDefinition(field.Type)?.GetMinLengthValueOrNull()"
                                           maxlength="@field.Definition?.ConvertDefinition(field.Type)?.GetMaxLengthValueOrNull()" />
                                    break;
                                }
                        }
                    }
                    catch (Exception)
                    {
                        <span class="control-render-error">Error rendering component!</span>
                    }
                </div>
            }
        </abp-modal-body>
        <abp-modal-footer>
            <button type="submit" class="btn btn-primary" name="saveRowValues" value="save">@AbpModalButtons.Save</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@AbpModalButtons.Cancel</button>
        </abp-modal-footer>
    </abp-modal>
</form>
<script defer>
    (function () {
        $('.custom-currency-input').maskMoney({
            thousands: ',',
            decimal: '.'
        }).maskMoney('mask');
    })();
</script>

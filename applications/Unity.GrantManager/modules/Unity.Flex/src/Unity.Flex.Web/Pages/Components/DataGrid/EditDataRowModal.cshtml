@page
@using Microsoft.Extensions.Localization;
@using Unity.Flex.Localization;
@using Unity.Flex.Web.Views.Shared.Components.CheckboxWidget;
@using Unity.Flex.Web.Views.Shared.Components.CurrencyWidget;
@using Unity.Flex.Web.Views.Shared.Components.DateWidget;
@using Unity.Flex.Web.Views.Shared.Components.TextAreaWidget;
@using Unity.Flex.Web.Views.Shared.Components.YesNoWidget
@using Unity.Flex.Worksheets;
@using Unity.Flex;
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal;

@model Unity.Flex.Web.Pages.Flex.EditDataRowModalModel;

@inject IStringLocalizer<FlexResource> L
@{
    Layout = null;
}

<form method="post" asp-page-handler="OnPostAsync" id="editRowData-@Model.FieldId" spellcheck="false">
    <abp-modal size="Large" id="custom-field-info-modal">
        <abp-modal-header class="custom-field-info-modal-header" title="Edit"></abp-modal-header>
        <abp-modal-body>
            <abp-input type="hidden" id="valueId" asp-for="@Model.ValueId" />
            <abp-input type="hidden" id="rowNumber" asp-for="@Model.Row" />
            <abp-input type="hidden" id="fieldId" asp-for="@Model.FieldId" />
            <abp-input type="hidden" id="worksheetId" asp-for="@Model.WorksheetId" />
            <abp-input type="hidden" id="worksheetInstanceId" asp-for="@Model.WorksheetInstanceId" />
            <abp-input type="hidden" id="FormVersionId" asp-for="@Model.FormVersionId" />
            <abp-input type="hidden" id="ApplicationId" asp-for="@Model.ApplicationId" />
            <abp-input type="hidden" id="UiAnchor" asp-for="@Model.UiAnchor" />
            <abp-input type="hidden" id="IsNew" asp-for="@Model.IsNew" />
            <abp-input type="hidden" id="CheckboxKeys" asp-for="@Model.CheckboxKeys" />

            @foreach (var field in Model.Properties ?? [])
            {
                <div class="edit_row_field unity-input-group">
                    <label class="form-label" for="@field.Name">@field.Label</label>
                    @try
                    {
                        @switch (field.Type)
                        {
                            case CustomFieldType.Checkbox:
                                {
                                    @await Component.InvokeAsync(typeof(CheckboxWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.Currency:
                                {
                                    @await Component.InvokeAsync(typeof(CurrencyWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.Date:
                                {
                                    @await Component.InvokeAsync(typeof(DateWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.DateTime:
                                {
                                    @await Component.InvokeAsync(typeof(DateWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.TextArea:
                                {
                                    @await Component.InvokeAsync(typeof(TextAreaWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            case CustomFieldType.YesNo:
                                {
                                    @await Component.InvokeAsync(typeof(YesNoWidget), new { fieldModel = field, modelName = field.Name })
                                    break;
                                }
                            default:
                                {
                                    <input type="@field.Type.ConvertInputType()"
                                           label="@field.Label"
                                           value="@field.CurrentValue?.ConvertInputValueOrNull(field.Type)"
                                           class="@field.Type.ApplyCssClass()"
                                           id="@($"{field.Name}.{field.Name}.{field.Id}")"
                                           name="@($"{field.Name}.{field.Name}.{field.Id}")"
                                           min="@field.Definition?.ConvertDefinition(field.Type)?.GetMinValueOrNull()"
                                           max="@field.Definition?.ConvertDefinition(field.Type)?.GetMaxValueOrNull()"
                                           minlength="@field.Definition?.ConvertDefinition(field.Type)?.GetMinLengthValueOrNull()"
                                           maxlength="@field.Definition?.ConvertDefinition(field.Type)?.GetMaxLengthValueOrNull()" />
                                    break;
                                }
                        }
                    }
                    catch (Exception)
                    {
                        <span class="control-render-error">Error rendering component!</span>
                    }
                    <span class="text-danger field-validation-valid" data-valmsg-for="@($"{field?.Name}.{field?.Name}.{field?.Id}")" data-valmsg-replace="true"></span>
                </div>
            }
        </abp-modal-body>
        <abp-modal-footer>
            <button type="submit" class="btn btn-primary" id="saveRowValues-@Model.FieldId" name="saveRowValues-@Model.FieldId" value="save">@AbpModalButtons.Save</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@AbpModalButtons.Cancel</button>
        </abp-modal-footer>
    </abp-modal>
</form>
<script defer>
    (function () {
        $('.custom-currency-input').maskMoney({
            thousands: ',',
            decimal: '.'
        }).maskMoney('mask');

        let fieldId = $('#fieldId').val();
        let formId = `editRowData-${fieldId}`;
        let form = $(`#${formId}`);
        let saveBtn = $(`#saveRowValues-${fieldId}`);

        // Select inputs, textareas, and selects within the form
        let formElements = $(`#${formId} input, #${formId} textarea, #${formId} select`);

        // Remove any existing 'change' event handlers
        formElements.removeAttr('onchange');

        // Add a new 'change' event handler
        formElements.on('change', function () {
            let isValid = form.valid();
            let hasInvalidCurrency = rowEditFormHasInvalidCurrencyCustomFields(formId);
            saveBtn.prop('disabled', !(isValid && !hasInvalidCurrency));

            if (!isValid) {
                form.find(':input').each(function () {
                    if (!this.validity.valid) {
                        console.log('Invalid field:', this.name || this.id);
                    }
                });
            }
        });

        // Get all date/time elements
        let datetimeElements = $(`#${formId} input[type="datetime-local"], #${formId} input[type="date"]`);
        
        // Loop through all the input elements
        datetimeElements.each(function () {
            // Find the <i> element within the same .custom-input-group
            var icon = $(this).closest('.custom-input-group').find('i');

            // Set the class of the <i> element to empty
            icon.attr('class', '');
        });

        function rowEditFormHasInvalidCurrencyCustomFields(formId) {
            let invalidFieldsFound = false;
            $("#" + formId + " input:visible").each(function (i, el) {
                let $field = $(this);
                if ($field.hasClass('custom-currency-input')) {
                    if (!isValidCurrencyCustomField($field)) {
                        invalidFieldsFound = true;
                    }
                }
            });

            return invalidFieldsFound;
        }
    })();
</script>

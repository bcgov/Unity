@using Microsoft.AspNetCore.Authorization;
@using Unity.Flex.Localization
@using Microsoft.Extensions.Localization;
@using Unity.Flex.Web.Views.Shared.Components.WorksheetInstanceWidget;
@using Unity.Flex.Web.Views.Shared.Components.WorksheetInstanceWidget.ViewModels;
@using Unity.Flex.Worksheets
@using Unity.Flex.Worksheets.Definitions

@model WorksheetViewModel;

@inject IStringLocalizer<FlexResource> L
@inject IAuthorizationService AuthorizationService

@if (Model.IsConfigured)
{
    <div class="@($"worksheet worksheet_{Model.UiAnchor}")">
        @foreach (var worksheetSection in Model.Sections)
        {
            <div class="@($"worksheet_section worksheet_section_{Model.UiAnchor}")">
                <label class="@($"worksheet_section_label worksheet_section_label_{Model.UiAnchor}")">@worksheetSection.Name</label>
                <div class="@($"worksheet_section_wrapper worksheet_section_wrapper_{Model.UiAnchor}")">
                    @foreach (var field in worksheetSection.Fields.OrderBy(s => s.Order))
                    {
                        <div class="worksheet_field worksheet_field_@Model.UiAnchor">
                            <label class="form-label">@field.Label</label>
                            @switch (field.Type)
                            {
                                case CustomFieldType.YesNo:
                                    {
                                        <select class="@field.Type.ApplyCssClass()"
                                                id="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                                name="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                                onchange="@($"notifyFieldChange('{Model.Name}', this)")">
                                            <option selected="@field.CurrentValue?.CompareSelectListValue("Please choose...")">Please choose...</option>
                                            <option selected="@field.CurrentValue?.CompareSelectListValue("Yes")">Yes</option>
                                            <option selected="@field.CurrentValue?.CompareSelectListValue("No")">No</option>
                                        </select>
                                        break;
                                    }
                                case CustomFieldType.Checkbox:
                                    {
                                        <div class="custom-checkbox">
                                            @if ((bool)(field?.CurrentValue?.ConvertInputValueOrNull(field.Type) ?? false) == true)
                                            {
                                                <input type="@field?.Type.ConvertInputType()"
                                                       id="@($"{field?.Name}.{Model.Name}.{field?.Id}")"
                                                       name="@($"{field?.Name}.{Model.Name}.{field?.Id}")"
                                                       onchange="@($"notifyFieldChange('{Model.Name}', this)")"
                                                       checked />
                                            }
                                            else
                                            {
                                                <input type="@field?.Type.ConvertInputType()"
                                                       id="@($"{field?.Name}.{Model.Name}.{field?.Id}")"
                                                       name="@($"{field?.Name}.{Model.Name}.{field?.Id}")"
                                                       onchange="@($"notifyFieldChange('{Model.Name}', this)")" />
                                            }
                                            <label for="@($"{field?.Name}.{Model.Name}.{field?.Id}")">@($"{field?.Label}")</label>
                                        </div>
                                        break;
                                    }
                                case CustomFieldType.Currency:
                                    {
                                        <div class="custom-input-group">
                                            <span class="custom-input-prepend">$</span>
                                            <input type="@field.Type.ConvertInputType()"
                                                   label="@field.Label"
                                                   value="@field.CurrentValue?.ConvertInputValueOrNull(field.Type)"
                                                   class="@field.Type.ApplyCssClass()"
                                                   min="@field.Definition?.ConvertDefinition(field.Type)?.GetMinValueOrNull()"
                                                   max="@field.Definition?.ConvertDefinition(field.Type)?.GetMaxValueOrNull()"
                                                   id="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                                   name="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                                   onchange="@($"notifyFieldChange('{Model.Name}', this)")" />
                                        </div>
                                        break;
                                    }
                                case CustomFieldType.Date:
                                    {
                                        <div class="custom-input-group">
                                            <span class="custom-input-append"><i class="fl fl-datetime"></i></span>
                                            <input type="@field.Type.ConvertInputType()"
                                                   class="@field.Type.ApplyCssClass()"
                                                   value="@field.CurrentValue?.ConvertInputValueOrNull(field.Type)"
                                                   label="@field.Label"
                                                   id="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                                   name="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                                   onchange="@($"notifyFieldChange('{Model.Name}', this)")" />
                                        </div>
                                        break;
                                    }
                                case CustomFieldType.Radio:
                                    {
                                        <fieldset>
                                            <legend></legend>
                                            @foreach (var option in ((RadioDefinition?)field?.Definition?.ConvertDefinition(field.Type))?.Options ?? [])
                                            {
                                                <div class="custom-radio-button">
                                                    @if (field != null)
                                                    {
                                                        @if ((field?.CurrentValue?.ConvertInputValueOrNull(field.Type))?.ToString() == option.Value)
                                                        {
                                                            <input type="@field.Type.ConvertInputType()"
                                                                   id="@($"{field.Name}.{Model.Name}.{field.Id}.{option.Value}")"
                                                                   name="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                                                   value="@($"{option.Value}")"
                                                                   onchange="@($"notifyFieldChange('{Model.Name}', this)")"
                                                                   checked />
                                                        }
                                                        else
                                                        {
                                                            <input type="@field?.Type.ConvertInputType()"
                                                                   id="@($"{field?.Name}.{Model.Name}.{field?.Id}.{option.Value}")"
                                                                   name="@($"{field?.Name}.{Model.Name}.{field?.Id}")"
                                                                   value="@($"{option.Value}")"
                                                                   onchange="@($"notifyFieldChange('{Model.Name}', this)")" />
                                                        }
                                                        <label for="@($"{field?.Name}.{Model.Name}.{field?.Id}")">@($"{option.Label}")</label>
                                                    }
                                                </div>
                                            }
                                        </fieldset>
                                        break;
                                    }
                                case CustomFieldType.SelectList:
                                    {
                                        <select class="@field.Type.ApplyCssClass()"
                                                id="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                                name="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                                onchange="@($"notifyFieldChange('{Model.Name}', this)")">

                                            @foreach (var item in ((SelectListDefinition?)field?.Definition?.ConvertDefinition(field.Type))?.Options ?? [])
                                            {
                                                <option selected="@field?.CurrentValue?.CompareSelectListValue(@item.Value)" value="@item.Value">@item.Key</option>
                                            }

                                        </select>
                                        break;
                                    }
                                case CustomFieldType.CheckboxGroup:
                                    {
                                        <fieldset>
                                            <legend></legend>
                                            @{
                                                var checkedValues = field?.CurrentValue?.GetCheckedOptions() ?? [];
                                                foreach (var option in ((CheckboxGroupDefinition?)field?.Definition?.ConvertDefinition(field.Type))?.Options ?? [])
                                                {
                                                    <div class="custom-checkbox">
                                                        @if (checkedValues.Contains(option.Key))
                                                        {
                                                            <input type="@field?.Type.ConvertInputType()"
                                                                   id="@($"{field?.Name}.{Model.Name}.{field?.Id}.{option.Key}")"
                                                                   name="@($"{field?.Name}.{Model.Name}.{field?.Id}.{option.Key}")"
                                                                   onchange="@($"notifyFieldChange('{Model.Name}', this)")"
                                                                   checked />
                                                        }
                                                        else
                                                        {
                                                            <input type="@field?.Type.ConvertInputType()"
                                                                   id="@($"{field?.Name}.{Model.Name}.{field?.Id}.{option.Key}")"
                                                                   name="@($"{field?.Name}.{Model.Name}.{field?.Id}.{option.Key}")"
                                                                   onchange="@($"notifyFieldChange('{Model.Name}', this)")" />
                                                        }
                                                        <label for="@($"{field?.Name}.{Model.Name}.{field?.Id}")">@($"{option.Label}")</label>
                                                    </div>
                                                }
                                            }
                                        </fieldset>
                                        break;
                                    }
                                default:
                                    {
                                        <input type="@field.Type.ConvertInputType()"
                                               label="@field.Label"
                                               value="@field.CurrentValue?.ConvertInputValueOrNull(field.Type)"
                                               class="@field.Type.ApplyCssClass()"
                                               min="@field.Definition?.ConvertDefinition(field.Type)?.GetMinValueOrNull()"
                                               max="@field.Definition?.ConvertDefinition(field.Type)?.GetMaxValueOrNull()"
                                               minlength="@field.Definition?.ConvertDefinition(field.Type)?.GetMinLengthValueOrNull()"
                                               maxlength="@field.Definition?.ConvertDefinition(field.Type)?.GetMaxLengthValueOrNull()"
                                               id="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                               name="@($"{field.Name}.{Model.Name}.{field.Id}")"
                                               onchange="@($"notifyFieldChange('{Model.Name}', this)")" />
                                        break;
                                    }
                            }
                            <span class="text-danger field-validation-valid" data-valmsg-for="@($"{field?.Name}.{Model.Name}.{field?.Id}")" data-valmsg-replace="true"></span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

@using Unity.Flex.Web.Views.Shared.Components.CheckboxGroupWidget;
@using Unity.Flex.Web.Views.Shared.Components;
@using Unity.Flex.Worksheets.Definitions;
@using Unity.Flex;

@model CheckboxGroupViewModel;

@if (Model.Field != null)
{
    
    var fieldBaseName = Model.WorksheetId.HasValue
        ? $"{Model.Field?.Name}.{Model.Name}.{Model.Field?.Id}.{Model.WorksheetId}"
        : $"{Model.Field?.Name}.{Model.Name}.{Model.Field?.Id}";
    
    <fieldset>
        <legend></legend>
        @{
            var checkedValues = Model.Field?.CurrentValue?.GetCheckedOptions() ?? [];
            foreach (var option in ((CheckboxGroupDefinition?)Model.Field?.Definition?.ConvertDefinition(Model.Field.Type))?.Options ?? [])
            {                
                var optionId = $"{fieldBaseName}.{option.Key}";
                
                <div class="custom-fields-checkbox-wrapper">
                    @if (checkedValues.Contains(option.Key))
                    {
                        <input type="@Model.Field?.Type.ConvertInputType()"
                               id="@optionId"
                               name="@optionId"
                               onchange="@($"notifyFieldChange('{Model.Name}', '{Model.Field?.UiAnchor}', this)")"
                               checked />
                    }
                    else
                    {
                        <input type="@Model.Field?.Type.ConvertInputType()"
                               id="@optionId"
                               name="@optionId"
                               onchange="@($"notifyFieldChange('{Model.Name}','{Model.Field?.UiAnchor}', this)")" />
                    }
                    <label for="@optionId">@($"{option.Label}")</label>
                </div>
            }
        }
    </fieldset>
}
apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: unity-release-triggers
message: |-
  A trigger setup has been created in your project: unity.
  For more information about using this template, including OpenShift considerations, 
  see template usage guide found in the project readme.md and wiki documents.
metadata:
  name: unity-release-triggers
  # namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
  # This template uses a separate parameter .env file to override the default values defined in this section. 
  # oc process -f .\openshift\unity-release-triggers.yaml --param-file=.env | oc create -f -
  annotations:
    description: |-
      Template for triggering an application build pipeline in OpenShift.
    iconClass: icon-build
    openshift.io/display-name: DotNet console application
    template.openshift.io/long-description: |-
      This template defines resources needed to build and deploy a GitHub DotNet core console application.
    tags: dotnet,unity-release
parameters:
# Project namespace parameters
- description: "The OpenShift project license plate 6 charater alpha numberic."
  displayName: "Project Namespace"
  name: PROJECT_NAMESPACE
  required: true
  generate: expression
  from: "[a-z0-9]{6}"
- description: "The OpenShift environment name [dev, test, prod]."
  displayName: "Environment name"
  name: ENV_NAME
  required: true
  value: "dev"
- description: The name of the application grouping.
  displayName: Application Group
  name: APPLICATION_GROUP
  value: Triggers
- description: The name of the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: unity-release
# Additional parameters for project application provisioning.
- description: Pipeline trigger token (Incomming Webhook)
  displayName: Webhook token
  from: '[a-zA-Z0-9]{26}'
  generate: expression
  name: PIPELINE_TOKEN
  required: true
# Template objects to instantiate the project.
objects:
# Secrets 
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APPLICATION_NAME}-webhook-token
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}-${ENV_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  stringData:
    WebHookSecretKey: ${PIPELINE_TOKEN}
# Trigger template
- apiVersion: triggers.tekton.dev/v1alpha1
  kind: TriggerTemplate
  metadata:
    name: unity
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}-${ENV_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  spec:
    params:
      - description: The semantic version identifier
        name: imagetag
      - description: The version tag name identifier
        name: tagname
    resourcetemplates:
      - apiVersion: tekton.dev/v1beta1
        kind: PipelineRun
        metadata:
          labels:
            imagetag: $(tt.params.imagetag)
            tekton.dev/pipeline: unity-release
          name: unity-deploy-$(uid)
        spec:
          params:
            - name: imagetag
              value: $(tt.params.imagetag)
            - name: tagname
              value: Unity_Grant_Manager_$(tt.params.imagetag)
          pipelineRef:
            name: unity-release
          serviceAccountName: pipeline
          workspaces:
            - emptyDir: {}
              name: unity-settings
# Trigger binding
- apiVersion: triggers.tekton.dev/v1alpha1
  kind: TriggerBinding
  metadata:
    name: unity
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}-${ENV_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  spec:
    params:
      - name: imagetag
        value: $(body.imagetag)
      - name: token
        value: $(header.${PIPELINE_TOKEN})
# Trigger Event listener
- apiVersion: triggers.tekton.dev/v1alpha1
  kind: EventListener
  metadata:
    name: unity
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}-${ENV_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  spec:
    serviceAccountName: pipeline
    triggers:
      - bindings:
          - kind: TriggerBinding
            ref: unity
        template:
          ref: unity
# Trigger route
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}-${ENV_NAME}
      app.kubernetes.io/name: ${APPLICATION_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
      app.kubernetes.io/managed-by: EventListener
      eventlistener: unity
    name: el-unity
  spec:
    host: el-unity-${PROJECT_NAMESPACE}-${ENV_NAME}.apps.silver.devops.gov.bc.ca
    port:
      targetPort: http-listener
    to:
      kind: Service
      name: el-unity
      weight: 100
    wildcardPolicy: None

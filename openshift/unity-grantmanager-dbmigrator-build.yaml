apiVersion: template.openshift.io/v1
kind: Template
message: |-
  A build config has been created in your project: unity-dbmigrator-build.
  For more information about using this template, including OpenShift considerations, 
  see template usage guide found in the project readme.md and wiki documents.
metadata:
  name: unity-dbmigrator-build
  # This template uses a separate parameter .env file to override the default values defined in this section. 
  # oc process -f .\openshift\unity-dbmigrator-build.yaml --param-file=.env | oc create -f -
  labels:
    template: unity-dbmigrator-build
  annotations:
    description: |-
      Template for building a DotNet console application on OpenShift.
    iconClass: icon-build
    openshift.io/display-name: DotNet console application
    template.openshift.io/long-description: |-
      This template defines resources needed to build and deploy a GitHub DotNet core console application.
    tags: dotnet,unity-dbmigrator-build
parameters:
# Project namespace parameters
- description: The name of the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: unity-grantmanager
- description: The name of the application grouping.
  displayName: Application Group
  name: APPLICATION_GROUP
  value: unity-grantmanager-build
# Additional parameters for project application provisioning.
- description: The version of the image to use, e.g. v1.0.0, v0.1.0, latest the ImageStream tag.
  displayName: Application Version
  name: IMAGESTREAM_TAG
  required: true
  value: latest
- description: Git source URI for application
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: 'https://github.com/bcgov/Unity'
- description: Git branch/tag reference
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
  value: dev
- description: Path within Git project to build from usually the root project directory.
  displayName: Context Directory
  name: CONTEXT_DIR
  value: /applications/Unity.GrantManager
# Template objects to instantiate the project.
objects:
# Imagestream
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}-1
      app.kubernetes.io/name: ${APPLICATION_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  spec:
    lookupPolicy:
      local: true
# Build Config 
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
      app.kubernetes.io/component: ${APPLICATION_NAME}
      app.kubernetes.io/instance: ${APPLICATION_NAME}-1
      app.kubernetes.io/name: ${APPLICATION_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:${IMAGESTREAM_TAG}
    postCommit: {}
    resources: 
      limits:
        cpu: 1450m
        memory: 4G
      requests:
        cpu: 250m
        memory: 512Mi
    successfulBuildsHistoryLimit: 3
    failedBuildsHistoryLimit: 3
    runPolicy: Serial
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      dockerStrategy:
        dockerfilePath: src/Unity.GrantManager.DbMigrator/Dockerfile
        type: Docker
    triggers:
    - type: ConfigChange

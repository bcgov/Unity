apiVersion: template.openshift.io/v1
kind: Template
message: |-
  A new application been created in your project: unity-database
  For more information about using this template, including OpenShift considerations,
  see template usage guide found in the project readme.md and wiki documents.
metadata:
  name: unity-database
  # This template uses a separate parameter .env file to override the default values defined in this section.
  # oc process -f .\database\unity-database.yaml --param-file=unity-database.env | oc create -f -
  labels:
    template: unity-database
  annotations:
    description: |-
      PostgreSQL database service with persistent storage.
      NOTE: Scaling to more than one replica is not supported.
    iconClass: icon-postgresql
    openshift.io/display-name: PostgreSQL
    openshift.io/long-description: This template provides a standalone PostgreSQL
      server with an initial database created. The database is stored on persistent storage.
      The database name, username, and password are selected through parameters during provisioning.
    tags: database,postgresql
parameters:
# Project namespace parameters
- description: The name of the backup application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: false
  value: unity-databaase
- description: The name of the application grouping.
  displayName: Application Group
  name: APPLICATION_GROUP
  required: true
  value: unity-tools
# Additional parameters for project database provisioning.
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: unity-database
- description: The port exposed for the database.
  displayName: Database Service Port
  name: DATABASE_PORT
  required: true
  value: "5432"
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  name: POSTGRESQL_USER
  required: false
  value: "postgres"
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  name: POSTGRESQL_PASSWORD
  required: false
  from: '[a-zA-Z0-9]{26}'
  generate: expression
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: postgres
- description: Volume space for data directory.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 256Mi
- description: The Namespace where the container image resides default=project-tools cluster=openshift, source=registry.redhat.io/rhel9/postgresql-16
  displayName: Registry Namespace
  name: IMAGEPULL_NAMESPACE
  from: '[a-zA-Z0-9]{5}-tools'
  generate: expression
- description: The Openshift ImageStream Name
  displayName: Registry imagestream name
  name: IMAGESTREAM_NAME
  required: true
  value: postgresql-16
- description: The version of the postgresql container image to use.
  displayName: Registry container image  to pull
  name: IMAGESTREAM_TAG
  required: true
  value: latest
- description: The registry path of the postgresql container image to use.
  displayName: Registry container image to pull
  name: IMAGEPULL_REGISTRY
  required: true
  value: image-registry.apps.silver.devops.gov.bc.ca
# Resource limits
- description: The minimum amount of CPU the container is guaranteed.
  displayName: CPU Request
  name: CPU_REQUEST
  required: true
  value: 50m
- description: The minimum amount of memory the container is guaranteed.
  displayName: Memory Request
  name: MEMORY_REQUEST
  required: true
  value: 64Mi
# Template objects to instantiate the project.
objects:
# Secrets
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''POSTGRES_DATABASE'']}'
      template.openshift.io/expose-password: '{.data[''POSTGRES_PASSWORD'']}'
      template.openshift.io/expose-username: '{.data[''POSTGRES_USER'']}'
    name: ${DATABASE_SERVICE_NAME}
    labels:
      app: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/component: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/instance: ${DATABASE_SERVICE_NAME}-1
      app.kubernetes.io/name: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  stringData:
    POSTGRES_USER: ${POSTGRESQL_USER}
    POSTGRES_DATABASE: ${POSTGRESQL_DATABASE}
    POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
  type: Opaque
# Service
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    name: ${DATABASE_SERVICE_NAME}
    labels:
      app: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/component: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/instance: ${DATABASE_SERVICE_NAME}-1
      app.kubernetes.io/name: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  spec:
    ports:
    - name: ${DATABASE_SERVICE_NAME}
      nodePort: 0
      protocol: TCP
      port: ${{DATABASE_PORT}}
      targetPort: ${{DATABASE_PORT}}
    selector:
      app: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
# Persistent storage for database backups
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: unity-data-backup
    labels:
      app: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/component: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/instance: ${DATABASE_SERVICE_NAME}-1
      app.kubernetes.io/name: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
    storageClassName: netapp-file-backup
    volumeMode: Filesystem
# Deployment
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
      # Add the trigger annotation
      image.openshift.io/triggers: >-
        [{"from":{"kind":"ImageStreamTag","name":"${IMAGESTREAM_NAME}:${IMAGESTREAM_TAG}","namespace":"${IMAGEPULL_NAMESPACE}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"${{DATABASE_SERVICE_NAME}\")].image","pause":"true"}]
    name: ${DATABASE_SERVICE_NAME}
    labels:
      app: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/component: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/instance: ${DATABASE_SERVICE_NAME}-1
      app.kubernetes.io/name: ${DATABASE_SERVICE_NAME}
      app.kubernetes.io/part-of: ${APPLICATION_GROUP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${DATABASE_SERVICE_NAME}
    template:
      metadata:
        labels:
          app: ${DATABASE_SERVICE_NAME}
          app.kubernetes.io/component: ${DATABASE_SERVICE_NAME}
          app.kubernetes.io/instance: ${DATABASE_SERVICE_NAME}-1
          app.kubernetes.io/name: ${DATABASE_SERVICE_NAME}
          app.kubernetes.io/part-of: ${APPLICATION_GROUP}
      spec:
        containers:
        - name: ${DATABASE_SERVICE_NAME}
          image: ${IMAGEPULL_REGISTRY}/${IMAGEPULL_NAMESPACE}/${IMAGESTREAM_NAME}:${IMAGESTREAM_TAG}
          ports:
          - containerPort: ${{DATABASE_PORT}}
            protocol: TCP
          env:
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}
                key: POSTGRES_PASSWORD
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 1
          resources:
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
          terminationMessagePath: /dev/termination-log
          envFrom:
            - secretRef:
                name: ${DATABASE_SERVICE_NAME}
          volumeMounts:
          - mountPath: /var/lib/pgsql/backups
            name: unity-data-backups
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: unity-data-backups
          persistentVolumeClaim:
            claimName: unity-data-backup
    strategy:
      type: Recreate
